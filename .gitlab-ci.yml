stages:
  - build-and-test
  - owasp-zap
  - sonarqube
  - build-microservices-images
  - push-microservices-images
  - deployment


build-and-test-spring-boot-projects:
  stage: build-and-test
  image: musefys6/docker-gradle8-image:0.0.1
  tags:
    - docker-runner
  script:
    - cd Backend/musefy
    - gradle clean build test
    - gradle --stop

build-and-test-fastapi-project:
  stage: build-and-test
  image: python:3.9
  tags:
    - docker-runner
  script:
    - cd Backend/recommendation-service
    - pip install -r requirements.txt 
    - pytest 
  needs:
    - build-and-test-spring-boot-projects

sonarqube-check:
  stage: sonarqube
  tags:
    - local-runner
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    SONAR_HOST_URL: "http://localhost:9000"
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - cd Backend/musefy
    - gradle sonar
    - gradle --stop
  allow_failure: true
  only:
    - main

build-microservices-images:
  stage: build-microservices-images
  image: musefys6/docker-gradle8-image:0.0.1
  tags:
    - docker-runner
  script:
    - cd Backend/musefy/music-service
    - gradle clean
    - gradle build
    - docker build -t musefys6/music-service:0.0.1 .
    - cd ../user-service
    - gradle clean
    - gradle build
    - docker build -t musefys6/user-service:0.0.1 .
    - cd ../api-gateway
    - gradle clean
    - gradle build
    - docker build -t musefys6/api-gateway:0.0.1 .
    - cd ..
    - cd ..
    - cd recommendation-service
    - docker build -t musefys6/recommendation-service:0.0.1 .
  only:
    - main
    - production


push-microservices-images:
  stage: push-microservices-images
  image: docker:latest
  tags:
    - docker-runner
  services:
    - docker:19.03-dind
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push musefys6/music-service:0.0.1
    - docker push musefys6/user-service:0.0.1
    - docker push musefys6/api-gateway:0.0.1
    - docker push musefys6/recommendation-service:0.0.1
  dependencies:
    - "build-microservices-images"
  only:
    - main
    - production

deploy-to-gcp:
  stage: deployment
  image: google/cloud-sdk:latest
  tags:
    - docker-runner
  before_script:
    - echo "$SERVICE_ACCOUNT_KEY" > service-account-key.json
    - gcloud auth activate-service-account --key-file=service-account-key.json
    - gcloud config set project musefy-spotify-clone
    - gcloud container clusters get-credentials musefy-cluster --region europe-west4 --project musefy-spotify-clone
  variables:
    SERVICE_ACCOUNT_KEY: $SERVICE_ACCOUNT_KEY
    
  script:
    - cd Backend/musefy/api-gateway
    - echo "Apply deployment.yaml for api-gateway"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../security-service
    - echo "Apply deployment.yaml for security service"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../music-service
    - echo "Apply deployment.yaml for music service"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../user-service
    - echo "Apply deployment.yaml for user service"
    - kubectl apply -f Backend/musefy/user-service/deployment.yaml
    - cd ..
    - cd ../recommendation-service
    - echo "Apply deployment.yaml for recommendation service"
    - kubectl apply -f deployment.yaml

  dependencies:
    - push-microservices-images

  only:
    - production

deploy-to-azure:
  stage: deployment
  image: mcr.microsoft.com/azure-cli:latest
  tags:
    - docker-runner
  variables:
    AZURE_RESOURCE_GROUP: "musefys6"
    AZURE_CLUSTER_NAME: "musefy"
    AZURE_SUBSCRIPTION_ID: "60f1ab8d-a24f-4223-885a-89ce5ff971b5"
    AZURE_TENANT_ID: "c66b6765-b794-4a2b-84ed-845b341c086a"
    AZURE_CLIENT_ID: "f2af68f8-24ae-4cb8-8cf0-607279a495a5"
    AZURE_CLIENT_SECRET: "c66b6765-b794-4a2b-84ed-845b341c086a"

  before_script:
    - az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
    - az account set --subscription $AZURE_SUBSCRIPTION_ID
    - az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CLUSTER_NAME

  script:
    - cd Backend/musefy/api-gateway
    - echo "Apply deployment.yaml for api-gateway"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../security-service
    - echo "Apply deployment.yaml for security service"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../music-service
    - echo "Apply deployment.yaml for music service"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../user-service
    - echo "Apply deployment.yaml for user service"
    - kubectl apply -f deployment-gcp.yaml
    - cd ../recommendation-service
    - echo "Apply deployment.yaml for recommendation service"
    - kubectl apply -f deployment.yaml
    
  allow_failure: true

  dependencies:
    - push-microservices-images
    - deploy-to-gcp

  only:
    - production

# jmeter_test:
#   stage: test
#   image: jmeter:5.4.1
#   script:
#     - jmeter -n -t test.jmx -l results.jtl
#   artifacts:
#     paths:
#       - results.jtl
#   only:
#     - main

owasp-zap-job:
  stage: owasp-zap
  image: docker:19.03.12
  services:
    - docker:dind
  tags:
    - docker-runner
  script:
    - pwd # this will print the current working directory to the logs
    - ls -la # this will list the files in the current directory
    - docker run --rm -v "$(pwd)":/zap/wrk/:rw --network host owasp/zap2docker-stable zap-api-scan.py -t https://musefy.vercel.app/ -f openapi -r /zap/wrk/owasp-zap-report.html || true
    - ls -la # run the list command again to see if the report has been created
  artifacts:
    paths:
      - owasp-zap-report.html
  only:
    - main


